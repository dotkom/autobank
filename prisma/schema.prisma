datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipts       Recipt[]

  Onlinepotten Onlinepotten[]
  @@map("users")
  Invoiceinfo Invoiceinfo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Recipt {
  id        String  @id @default(cuid())
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  full_name String
  email     String

  created_at   DateTime @default(now())
  approved_at  DateTime
  last_updated DateTime @default(now())
  status       String

  reimbursement Boolean
  account_nr    Int?
  paid_at       DateTime?
  amount        Int
  occasion      String

  comments     String?
  appendix     Bytes
  error        String
  error_fields String[]
}

model Onlinepotten {
  id        String  @id @default(cuid())
  user      User?   @relation(fields: [userId], references: [id])
  userId    String?
  full_name String
  email     String

  created_at   DateTime @default(now())
  approved_at  DateTime
  last_updated DateTime @default(now())
  status       String

  occation       String
  planned_date   DateTime
  hours          Int
  description    String
  participants   String[]
  payment_method String
  recipt_id      Int

  comments     String
  error        String
  error_fields String[]
}

model Invoiceinfo {
  id           String  @id @default(cuid())
  user         User?   @relation(fields: [userId], references: [id])
  userId       String?
  orgnr        String
  company_name String

  contact_name  String
  contact_email String
  contact_nr    Int

  occasion String

  invoice_method String
  po_nr          String
  duedays        Int

  comments     String?
  error        String?
  error_fields String[]

  created_at   DateTime @default(now())
  approved_at  DateTime
  last_updated DateTime @default(now())
  status       String
}
